1.Intersection of Two Linked Lists?
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
code-> ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode  *curr1 = headA, *curr2 = headB;
        while (curr1 != curr2)
        {
            if (curr1 == NULL)
                curr1 = headB;
            else
                curr1 = curr1->next;
            if (curr2 == NULL)
                curr2 = headA;
            else
                curr2 = curr2->next;
        }
        return curr1;
    }
2.Given head, the head of a linked list, determine if the linked list has a cycle in it.
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
code-> bool hasCycle(ListNode *head) {
        // if head is NULL then return false;
        if(head == NULL)
            return false;
        
		// making two pointers fast and slow and assignning them to head
        ListNode *fast = head;
        ListNode *slow = head;
        
		// till fast and fast-> next not reaches NULL
		// we will increment fast by 2 step and slow by 1 step
        while(fast != NULL && fast ->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            
			
			// At the point if fast and slow are at same address
			// this means linked list has a cycle in it.
            if(fast == slow)
                return true;
        }
        
		// if traversal reaches to NULL this means no cycle.
        return false;
    }

