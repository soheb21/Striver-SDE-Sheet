1.Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.
Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1#
code->Node *mergeTwoLinkedlist(Node *a,Node *b){
    Node *temp=new Node(0);
    Node *res=temp;
    while(a!=NULL && b!=NULL){
        if(a->data<b->data){
            temp->bottom=a;
            temp=temp->bottom;
            a=a->bottom;
        }
        else{
            temp->bottom=b;
            temp=temp->bottom;
            b=b->bottom;
        }
        
    }
    if (a) temp->bottom=a;
    else temp->bottom=b;
    
    return res->bottom;
}
Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL || root->next==NULL){
       return root;
   }
   root->next=flatten(root->next);
   
   root=mergeTwoLinkedlist(root,root->next);
   
   return root;
}

2.Given the head of a linked list, rotate the list to the right by k places.
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
summary:  ListNode* rotateRight(ListNode* head, int k) {
        //edge case
        if(head==NULL||head->next==NULL|| k==0) return head;
        
        ListNode *curr=head;
        int len=1;
        while(curr->next!=NULL){
            curr=curr->next;
            len++;
        }
        curr->next=head;
        k=k%len;// agar k value len se badii ho
        k=len-k;
        while(k--){
            curr=curr->next;
        }
        head=curr->next;
        curr->next=NULL;
        
        return head;
        
    }
