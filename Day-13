1.Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k 
then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.
https://leetcode.com/problems/reverse-nodes-in-k-group/
code->int length(ListNode* head){
         ListNode* temp=head; 
         int len=0;
         while(temp!=NULL){
             temp=temp->next;
             len++;
         }
        return len;
    }
     ListNode* rev( ListNode* head, int k,int len){
         //Base case
         if(len<k){
             return head;
         }
          ListNode* curr=head;
          ListNode* pre=NULL;
          ListNode* nex=NULL;
         int count=0;
         while(curr!=NULL && count<k){
             nex=curr->next;
             curr->next=pre;
             pre=curr;
             curr=nex;
             count++;
         }
         if(nex!=NULL){
             head->next=rev(nex,k,len-k);
         }
         return pre;
         
     }
    ListNode* reverseKGroup(ListNode* head, int k) {
        int le=length(head);
        return rev(head,k,le);
    }
2.Given the head of a singly linked list, return true if it is a palindrome.
Input: head = [1,2,2,1]
Output: true
code-> bool ispal(ListNode* &left,ListNode* right){
        if(right==NULL) return true;
        
        bool first=ispal(left,right->next);
         if(first==false) return false;
        
        bool second=(left->val==right->val);
        left=left->next;
        
        return second;
    }
    bool isPalindrome(ListNode* head) {
        return ispal(head,head);
    }
3.Given the head of a linked list, return the node where the cycle begins. 
If there is no cycle, return null.
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
https://leetcode.com/problems/linked-list-cycle-ii/
code-> ListNode *detectCycle(ListNode *head) {
         if(head == NULL||head->next == NULL) return NULL;
        
    ListNode* fast = head;
    ListNode* slow = head;
    ListNode* entry = head;
        
    while(fast->next != NULL&&fast->next->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
            
        if(slow == fast) {
            while(slow != entry) {
                slow = slow->next;
                entry = entry->next;
            }
            return slow;
        }
    }
    return NULL;
    }
