 
 1.Given an integer array nums, find the contiguous subarray (containing at least one number) 
 which has the largest sum and return its sum.
 A subarray is a contiguous part of an array.
 https://leetcode.com/problems/maximum-subarray/
 
 code->int maxSubArray(vector<int>& nums) {
        
   int sum=0, ma = nums[0] ;
   for(int i=0; i<nums.size(); i++){
		sum += nums[i];
		ma = max(ma,sum);
		
		if(sum<0)
			sum=0;
			
   }
   return ma;
    
    }
2.Given an array nums with n objects colored red, white, or blue, sort them in-place so
that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
https://leetcode.com/problems/sort-colors/

 
code->  void sortColors(vector<int>& nums) {
        //sort(nums.begin(),nums.end())
        int mid,left=0,right=nums.size()-1;
        while(mid<=right){
            if(nums[mid]==0){
               swap(nums[mid],nums[left]);
                left++;
                mid++;
            }
            else if(nums[mid]==2){
                swap(nums[mid],nums[right]);
                right--;
            }
            else{
                mid++;
            }
        }
3.You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a 
different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. 
If you cannot achieve any profit, return 0.
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

code->int maxProfit(vector<int>& prices) {
        int msf =prices[0];
        int mx_profit=0;
        for (int i=0;i<prices.size();i++){
            msf=min(prices[i],msf);
            int profit=prices[i]-msf;
            mx_profit=max(mx_profit,profit);
        }
        return mx_profit;
        
    }
