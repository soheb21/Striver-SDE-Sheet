1.You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly.
DO NOT allocate another 2D matrix and do the rotation.
https://leetcode.com/problems/rotate-image/

code->void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }
    }
    
2.Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.  
code->vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>ans;
        sort(intervals.begin(),intervals.end());
        vector<int>temp_intervals=intervals[0];
        
        for (auto it:intervals){
            if(it[0]<=temp_intervals[1]){
                temp_intervals[1]=max(it[1],temp_intervals[1]);
                
            }else{
                ans.push_back(temp_intervals);
                temp_intervals=it;
            }
        }
        ans.push_back(temp_intervals);
        return ans;
    }
