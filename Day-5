1.Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix.
This matrix has the following properties:
*Integers in each row are sorted from left to right.
*The first integer of each row is greater than the last integer of the previous row.

code-> bool searchMatrix(vector<vector<int>>& matrix, int target) {
        //Binary Search 
        int n=matrix.size();
        int m=matrix[0].size();
       int low=0,high=(n*m)-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(matrix[mid/m][mid%m]==target)
            {
                return true;
            }
            else if(target<matrix[mid/m][mid%m])
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return false;
        
    }
    
 2.Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
 code->double myPow(double x, int n) { // Tc = O(long2n) Sc=O(1).
        long long nn=n;
        double ans=1.0;
        if(nn<0) nn=-1*nn;
        while(nn!=0){
            if(nn%2==0){ //even
                x=x*x;
                nn=nn/2;
            }
            else{       //odd
                ans=ans*x;
                nn=nn-1;
            }
        }
       if (n < 0) ans = (double)(1.0) / (double)(ans);
    return ans;
    }
 3.Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. 
You may assume that the majority element always exists in the array.
code->int majorityElement(vector<int>& nums) {
    int count = 0;
        int candidate = 0;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            if(num==candidate) count += 1; 
            else count -= 1; 
        }

        return candidate;
    }
4.Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
code-> vector<int> majorityElement(vector<int>& nums) {
    int sz = nums.size();
  int num1 = -1, num2 = -1, count1 = 0, count2 = 0, i;
  for (i = 0; i < sz; i++) {
    if (nums[i] == num1)
      count1++;
    else if (nums[i] == num2)
      count2++;
    else if (count1 == 0) {
      num1 = nums[i];
      count1 = 1;
    } else if (count2 == 0) {
      num2 = nums[i];
      count2 = 1;
    } else {
      count1--;
      count2--;
    }
  }
  vector < int > ans;
  count1 = count2 = 0;
  for (i = 0; i < sz; i++) {
    if (nums[i] == num1)
      count1++;
    else if (nums[i] == num2)
      count2++;
  }
  if (count1 > sz / 3)
    ans.push_back(num1);
  if (count2 > sz / 3)
    ans.push_back(num2);
  return ans;
    }
