1.138. Copy List with Random Pointer
code->private:
    void insertAtTail(Node* &head,Node* &tail,int d){
        Node* newnode= new Node(d);
        if(head==NULL){
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
    }
public:
    
    Node* copyRandomList(Node* head) {
        /* Approch 1 with Extra Space.
        unordered_map<Node*,Node*>mp;
        Node* temp=head;
        while(temp!=NULL){
            Node*copy=new Node(temp->val);
            mp[temp]=copy; // Address nhi store krega copy k value ka.
            temp=temp->next;
        }
        // Connection 
        temp=head;
        while(temp!=NULL){
            mp[temp]->next=mp[temp->next];
            mp[temp]->random=mp[temp->random];
            temp=temp->next;
        }
        return mp[head]; */
        
        // Approach 2 
     //step 1: Create a Clone List
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp = head;
        while(temp != NULL) {
            insertAtTail(cloneHead, cloneTail, temp->val);
            temp = temp -> next;
        }
        
        // step 2: insert nodes of Clone List in between originalList
        
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL) {
            Node* next = originalNode -> next;
            originalNode -> next = cloneNode;
            originalNode = next;
            
            next = cloneNode -> next;
            cloneNode -> next = originalNode;
            cloneNode  = next;
        }
        
        // step 3: Random pointer copy
        originalNode = head;
        cloneNode = cloneHead;
        
        while(originalNode != NULL && cloneNode != NULL) { 
            
            if(originalNode -> random != NULL) {
                cloneNode -> random = originalNode -> random-> next;
            }
            else
            {
                cloneNode -> random  = NULL;
            }
            
            cloneNode = cloneNode -> next;
            originalNode = originalNode -> next;
        }
        
        //step 4: revert step 2 changes
        Node* original = head;
        Node* copy = cloneHead;
        
         while (original && copy)
            {
                original->next =
                 original->next? original->next->next : original->next;
         
                copy->next = copy->next?copy->next->next:copy->next;
                original = original->next;
                copy = copy->next;
            }

        // step 5 answer return
        return cloneHead;
  2.Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
  such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
  Notice that the solution set must not contain duplicate triplets.
  https://leetcode.com/problems/3sum/
  code-> vector<vector<int>> threeSum(vector<int>& nums) {
        //Two Pointer Approch
        /*simple a+b+c=0
                 b+c=-a       */
        
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n;i++){
        int a=nums[i];
        int t=-a;
        int s=i+1,e=n-1;
            while(s<e){
                int temp_ans=nums[s]+nums[e];
                if(temp_ans==t){
                    ans.push_back({nums[i],nums[s],nums[e]});
                    while(s<e&&nums[s]==nums[s+1])s++;
                    while(s<e&&nums[e]==nums[e-1])e--;
                    s++;
                    e--;
                }
                else if(temp_ans<t){
                    s++;
                }
                else{
                    e--;
                }
                
            }
            while(i+1<n&&nums[i+1]==nums[i])i++;
        }
        return ans;
    }
