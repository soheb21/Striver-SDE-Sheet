1.There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that 
the robot can take to reach the bottom-right corner.
https://leetcode.com/problems/unique-paths/
code-> //Tc =O(N*M),Sc=O(N*M);
    int countPath(int i,int j,int n,int m,vector<vector<int>>&dp){
        if(i==n-1 && j==m-1) return 1;
        if(i>=n||j>=m) return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        else return dp[i][j]=countPath(i+1,j,n,m,dp)+countPath(i,j+1,n,m,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        return countPath(0,0,m,n,dp);
    }
2.Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].
code-> // TC=O(nlongN),Sc=O(1)
    int Merge(vector < int > & nums, int low, int mid, int high) {
  int total = 0;
  int j = mid + 1;
  for (int i = low; i <= mid; i++) {
    while (j <= high && nums[i] > (long long)2 * nums[j]) {
      j++;
    }
    total += (j - (mid + 1));
  }

  vector < int > t;
  int left = low, right = mid + 1;

  while (left <= mid && right <= high) {

    if (nums[left] <= nums[right]) {
      t.push_back(nums[left++]);
    } else {
      t.push_back(nums[right++]);
    }
  }

  while (left <= mid) {
    t.push_back(nums[left++]);
  }
  while (right <= high) {
    t.push_back(nums[right++]);
  }

  for (int i = low; i <= high; i++) {
    nums[i] = t[i - low];
  }
  return total;
}
int MergeSort(vector < int > & nums, int low, int high) {

  if (low >= high) return 0;
  int mid = (low + high) / 2;
  int inv = MergeSort(nums, low, mid);
  inv += MergeSort(nums, mid + 1, high);
  inv += Merge(nums, low, mid, high);
  return inv;
}
    int reversePairs(vector<int>& nums) {
        return MergeSort(nums,0,nums.size()-1);
    }
3.Given an array of integers nums and an integer target, 
return indices of the two numbers such that they add up to target.
https://leetcode.com/problems/two-sum/'
code->map<int,int>mp;
        vector<int>ans;
        for(int i=0;i<nums.size();i++){
            int search_pair=target-nums[i];
            if(mp.find(search_pair)!=mp.end()){
                int index =mp.find(search_pair)->second;
                ans.push_back(index);
                ans.push_back(i);
                return ans;
            }
            mp.insert(pair<int,int>(nums[i],i));
        }
        return ans;
