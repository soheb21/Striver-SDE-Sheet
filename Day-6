1.There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that 
the robot can take to reach the bottom-right corner.
https://leetcode.com/problems/unique-paths/
code-> //Tc =O(N*M),Sc=O(N*M);
    int countPath(int i,int j,int n,int m,vector<vector<int>>&dp){
        if(i==n-1 && j==m-1) return 1;
        if(i>=n||j>=m) return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        else return dp[i][j]=countPath(i+1,j,n,m,dp)+countPath(i,j+1,n,m,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        return countPath(0,0,m,n,dp);
    }
